import csv

import numpy as np

from collections import namedtuple

Data = namedtuple( 'Data', 
    [ 'population' , 
    'sources',
    'count_type'])

# calcolare la frequenza della strategie delle varie generazione per ognuna delle simulazioni

def count_strategy(strategy):
    
    """

    Count the frequencies of the many kind of population

    Parameters:

    -----------------------------
	
    strategy: an array 1x(size of population)
    
    -----------------------------

    Returns a tupla with a 3D array with data about the 0-generation, the matrix of reputation and an array that store the amount of every types of individual
	
    """

    count_array=np.zeros(12,np.byte)

    for x in range(-5,+7):

        count_array[x]=len(strategy[strategy==x])
        
    return count_array ##### [0 1 2 3 4 5 6 -5 -4 -3 -2 -1]

def frequency_strategies(data_simulation):
    
    """

    Calculus of the frequencies of strategies for a simulation

    Parameters:

    -----------------------------
	
    data_simulation: an array with data from each generation
    
    -----------------------------

    Returns:
        
    frequencies: an array with the strategy frequencies
    """
    
    tot_strategy = np.zeros(12, np.uint64)
    
    only_strategy= data_simulation[:,0,:]
    
    a=np.unique(only_strategy, return_counts=True)
    
    tot_strategy[a[0]]=a[1]
    
    shape=np.shape(data_simulation)
    
    tot_people = shape[0]*shape[2]
    
    inv_tot_p = np.float16(1/tot_people)
    
    print(tot_strategy)
    
    frequencies=np.array(tot_strategy*inv_tot_p, np.float16)
    
    assert np.shape(frequencies) == (1, 12)
    
    return frequencies

def analize_simulations(all_data):
    
    """

    Create the dataframe of the frequencies of strategies for all the simulations

    Parameters:

    -----------------------------
	
    all_data: a list with all the data generated by simulations
    
    -----------------------------

    Returns:
        
    stat_strategies: an array with the frequencies of strategies in all simulation
    
    mean_strategy: an array with the mean strategy of every simulations
    """
    
    stat_strategies=np.array([])
    
    for N_simulation in range(len(all_data)):
        
        stat_strategies=np.append(stat_strategies, frequency_strategies(all_data[N_simulation]), axis=0)
        
    mean_strategy=np.mean(stat_strategies, 1, np.float32)
        
    return stat_strategies, mean_strategy
    


