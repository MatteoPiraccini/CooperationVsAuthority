import numpy as np


def frequency_strategies(data_simulation):
    
    """

    Computation of the frequencies of strategies for a simulation

    Parameters:

    -----------------------------
	
    data_simulation: array (N of generations, 2, size of population), data from the simulation
    
    -----------------------------

    Returns an array (12,), frequencies of the strategies
    """
    
    tot_strategy = np.zeros(12, np.uint64)
    
    only_strategy = data_simulation[:,0,:]
    
    # return the array with the unique values and the array with the count of 
    # of each value
    
    a = np.unique(only_strategy, return_counts=True)
    
    tot_strategy[a[0]]=a[1]
    
    shape = np.shape(data_simulation)
    
    # tot people = (N of generation)*(size of population)
    
    tot_people = shape[0]*shape[2]
    
    # save time using * instead of /
    
    inv_tot_p = np.float16(1/tot_people)
    
    frequencies = np.array(tot_strategy*inv_tot_p, np.float16)
    
    return frequencies

def analize_simulations(all_data):
    
    """

    Create the dataframe of the frequencies of strategies for all the simulations
    
    and save the mean strategy into a file csv located in the same directory

    Parameters:

    -----------------------------
	
    all_data: array (N of simulations, N of generations, 2, size of population) 
    
    all the data generated by simulations
    
    -----------------------------

    Returns:
        
    stat_strategies: array (N of simulations, 12), frequencies of strategies in all simulation
    
    mean_strategy: array (N of simulations), mean strategy of each simulations
    """
    
    N_simulation = len(all_data)
    
    stat_strategies = np.zeros((N_simulation, 12))
    
    mean_strategy = np.zeros((N_simulation, 1))
    
    strategies = np.array( [0, 1, 2, 3, 4, 5, 6, -5, -4, -3, -2, -1])
    
    for n_simulation in range(N_simulation):
        
        stat_strategies[n_simulation] = np.array(frequency_strategies(all_data[n_simulation]), dtype=np.float16)
        
        mean_strategy[n_simulation] = np.array( np.sum(stat_strategies[n_simulation]*strategies))
   
    if np.shape(mean_strategy) == 1:
        
        mean_strategy=[mean_strategy]
    
    # save means into a file in the same directory
    
    np.savetxt('Results.csv', mean_strategy, delimiter=',',fmt='%10.5f')
        
    return stat_strategies, mean_strategy
    


